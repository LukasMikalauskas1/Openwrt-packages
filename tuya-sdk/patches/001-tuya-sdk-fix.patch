Index: tuya-sdk-1.0.0/CMakeLists.txt
===================================================================
--- tuya-sdk-1.0.0.orig/CMakeLists.txt
+++ tuya-sdk-1.0.0/CMakeLists.txt
@@ -50,7 +50,7 @@ include( CMakeDependentOption )
 CMAKE_DEPENDENT_OPTION( BUILD_SHARED_LIBS
                         "Set this to ON to build all libraries as shared libraries. When OFF, libraries build as static libraries."
                         ON "${ALLOW_SHARED_LIBRARIES}"
-                        OFF )
+                        ON )
 
 # Set output directories.
 set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin )
@@ -72,6 +72,7 @@ add_subdirectory( src )
 # # Build the demos.
 add_subdirectory( examples )
 
+install(CODE "MESSAGE(\"installing\")")
 
 message(STATUS "------------------------------------------------------------" )
 message(STATUS "[Link SDK] Configuration summary."                            )
Index: tuya-sdk-1.0.0/middleware/CMakeLists.txt
===================================================================
--- tuya-sdk-1.0.0.orig/middleware/CMakeLists.txt
+++ tuya-sdk-1.0.0/middleware/CMakeLists.txt
@@ -2,7 +2,7 @@ include( ${LIBRARIES_DIR}/coreHTTP/httpF
 include( ${LIBRARIES_DIR}/coreMQTT/mqttFilePaths.cmake )
 
 # Create target for POSIX implementation of reconnect logic.
-add_library( middleware_implementation STATIC
+add_library( middleware_implementation
                 ${MQTT_SOURCES}
                 ${MQTT_SERIALIZER_SOURCES}
                 ${HTTP_SOURCES}
Index: tuya-sdk-1.0.0/platform/posix/CMakeLists.txt
===================================================================
--- tuya-sdk-1.0.0.orig/platform/posix/CMakeLists.txt
+++ tuya-sdk-1.0.0/platform/posix/CMakeLists.txt
@@ -1,7 +1,7 @@
 include( ${LIBRARIES_DIR}/mbedtlsFilePaths.cmake )
 
 # Create target for POSIX implementation of reconnect logic.
-add_library( platform_port STATIC
+add_library( platform_port
                "mbedtls_sockets_wrapper.c"
                "network_wrapper.c"
                "system_wrapper.c"
Index: tuya-sdk-1.0.0/src/CMakeLists.txt
===================================================================
--- tuya-sdk-1.0.0.orig/src/CMakeLists.txt
+++ tuya-sdk-1.0.0/src/CMakeLists.txt
@@ -3,7 +3,7 @@ include( ${LIBRARIES_DIR}/coreJSON/jsonF
 include( ${LINKSDK_DIRS}/tuyaFilePaths.cmake )
 
 # Add a library with the above sources
-add_library( link_core STATIC
+add_library( link_core
     ${LINK_SDK_SOURCES}
     ${JSON_SOURCES}
 )
Index: tuya-sdk-1.0.0/utils/CMakeLists.txt
===================================================================
--- tuya-sdk-1.0.0.orig/utils/CMakeLists.txt
+++ tuya-sdk-1.0.0/utils/CMakeLists.txt
@@ -2,7 +2,7 @@
 FILE(GLOB UTILS_SOURCES *.c)
 
 # Add a library with the above sources
-add_library( utils_modules STATIC
+add_library( utils_modules
     ${UTILS_SOURCES}
 )
 
Index: tuya-sdk-1.0.0/utils/log.h
===================================================================
--- tuya-sdk-1.0.0.orig/utils/log.h
+++ tuya-sdk-1.0.0/utils/log.h
@@ -30,15 +30,15 @@ typedef struct {
 typedef void (*log_LogFn)(log_Event *ev);
 typedef void (*log_LockFn)(bool lock, void *udata);
 
-enum { LOG_TRACE, LOG_DEBUG, LOG_INFO, LOG_WARN, LOG_ERROR, LOG_FATAL };
+enum { LOG_TRACE, LOG_DEBUG1, LOG_INFO1, LOG_WARN, LOG_ERROR1, LOG_FATAL };
 
 #define __FILENAME__ (strrchr(__FILE__, '/') ? strrchr(__FILE__, '/') + 1 : __FILE__)
 
 #define log_trace(...) log_log(LOG_TRACE, __FILENAME__, __LINE__, __VA_ARGS__)
-#define log_debug(...) log_log(LOG_DEBUG, __FILENAME__, __LINE__, __VA_ARGS__)
-#define log_info(...)  log_log(LOG_INFO,  __FILENAME__, __LINE__, __VA_ARGS__)
+#define log_debug(...) log_log(LOG_DEBUG1, __FILENAME__, __LINE__, __VA_ARGS__)
+#define log_info(...)  log_log(LOG_INFO1,  __FILENAME__, __LINE__, __VA_ARGS__)
 #define log_warn(...)  log_log(LOG_WARN,  __FILENAME__, __LINE__, __VA_ARGS__)
-#define log_error(...) log_log(LOG_ERROR, __FILENAME__, __LINE__, __VA_ARGS__)
+#define log_error(...) log_log(LOG_ERROR1, __FILENAME__, __LINE__, __VA_ARGS__)
 #define log_fatal(...) log_log(LOG_FATAL, __FILENAME__, __LINE__, __VA_ARGS__)
 
 
